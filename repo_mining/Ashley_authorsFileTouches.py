#collects the authors and the dates when they touched each file in 
#the list of files generated by the adapted file CollectFiles.py

import json
import requests
import csv

import os

#to save data to csv file
import csv
#To parse date
from datetime import datetime


if not os.path.exists("data"):
 os.makedirs("data")

# GitHub Authentication function
def github_auth(url, lsttoken, ct):
    jsonData = None
    try:
        ct = ct % len(lstTokens)
        headers = {'Authorization': 'Bearer {}'.format(lsttoken[ct])}
        request = requests.get(url, headers=headers)
        jsonData = json.loads(request.content)
        ct += 1
    except Exception as e:
        pass
        print(e)
    return jsonData, ct

# @dictFiles, empty dictionary of files
# @lstTokens, GitHub authentication tokens
# @repo, GitHub repo
def countfiles(dictfiles, lsttokens, repo):
    ipage = 1  # url page counter
    ct = 0  # token counter

    try:
        # field names for csv file 
        fields = ['Name', 'Week_Number', 'File_Variable']   
        # name of csv file   
        csvFileName = "commitInfo.csv"
        with open(csvFileName, 'w') as csvFile:      
            csvWriter = csv.writer(csvFile)   
            # writing the headers
            csvWriter.writerow(fields)   
        fileVariableDict = {}  
        uniqueFileCnt=0  
        # loop though all the commit pages until the last returned empty page
        while True:
            spage = str(ipage)
            commitsUrl = 'https://api.github.com/repos/' + repo + '/commits?page=' + spage + '&per_page=100'
            jsonCommits, ct = github_auth(commitsUrl, lsttokens, ct)

            # break out of the while loop if there are no more commits in the pages
            if len(jsonCommits) == 0:
                break
            # iterate through the list of commits in  spage
            for shaObject in jsonCommits:
                sha = shaObject['sha']
                # For each commit, use the GitHub commit API to extract the files touched by the commit
                shaUrl = 'https://api.github.com/repos/' + repo + '/commits/' + sha
                shaDetails, ct = github_auth(shaUrl, lsttokens, ct)
                filesjson = shaDetails['files']
                # Only get source files
                for filenameObj in filesjson:
                    filename = filenameObj['filename']
                    if filename.endswith(".java") or filename.endswith(".py") or filename.endswith(".kt") or filename.endswith(".cpp") or filename.endswith(".c"):
                        dictfiles[filename] = dictfiles.get(filename, 0) + 1
                        # Collects the authors and the dates
                        name, date = shaObject['commit']['author']['name'],shaObject['commit']['author']['date']
                        #parsing date for scatterplot
                        parsedDate = datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ")
                        # Save data to a file
                        # appending to csv file
                        if not filename in fileVariableDict:
                            uniqueFileCnt = uniqueFileCnt+1
                            fileVariableDict[filename] = uniqueFileCnt
                        
                        with open(csvFileName, 'a') as csvFile:      
                            csvWriter = csv.writer(csvFile)    
                            
                            # appends data row
                            #with the author name, the week number and what file variable
                            csvWriter.writerow([name,parsedDate.isocalendar()[1],fileVariableDict[filename]]) 
                        
                
                
            ipage += 1
    except:
        print("Error receiving data")
        exit(0)
# GitHub repo
repo = 'scottyab/rootbeer'
# repo = 'Skyscanner/backpack' # This repo is commit heavy. It takes long to finish executing
# repo = 'k9mail/k-9' # This repo is commit heavy. It takes long to finish executing
# repo = 'mendhak/gpslogger'


# put your tokens here
# Remember to empty the list when going to commit to GitHub.
# Otherwise they will all be reverted and you will have to re-create them
# I would advise to create more than one token for repos with heavy commits
lstTokens = [""]

dictfiles = dict()
countfiles(dictfiles, lstTokens, repo)
print('Total number of files: ' + str(len(dictfiles)))

file = repo.split('/')[1]
# change this to the path of your file
fileOutput = 'file_' + file + '.csv'
rows = ["Filename", "Touches"]
fileCSV = open(fileOutput, 'w')
writer = csv.writer(fileCSV)
writer.writerow(rows)

bigcount = None
bigfilename = None
for filename, count in dictfiles.items():
    rows = [filename, count]
    writer.writerow(rows)
    if bigcount is None or count > bigcount:
        bigcount = count
        bigfilename = filename
fileCSV.close()
print('The file ' + bigfilename + ' has been touched ' + str(bigcount) + ' times.')
